<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%" 
		 xmlns:visual="org.un.cava.birdeye.ravis.graphLayout.visual.*" initialize="initData();">
	<fx:Script>
		<![CDATA[
			import business.events.GetCollaborationEvent;
			import business.events.SearchAuthorEvent;
			import business.events.SearchAuthorRightEvent;
			import business.events.ViewCoAuthorGraphEvent;
			
			import flash.sampler.NewObjectSample;
			
			import flashx.textLayout.factory.TruncationOptions;
			
			import models.ModelLocator;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			
			import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ConcentricRadialLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.CircularEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedArrowEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedBalloonEdgeRenderer;
			
			import spark.events.IndexChangeEvent;
			
			import valueobjects.AuthorOrgObject;
			
			[Bindable]
			public var searchAuthors:ArrayCollection = ModelLocator.getInstance().searchedAuthors;
			[Bindable]
			public var searchAuthorsRight:ArrayCollection = ModelLocator.getInstance().searchedAuthorsRight;
			
			public var dataLeft:Object = new Object();
			public var dataRight:Object = new Object();
			public var isCoGraph:Boolean = true;
			public var isCoPath:Boolean = false;
			public var isCitation:Boolean = false;
			public var isRecommend:Boolean = false;
						
			protected function btnHideLeft_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				SearchLeft.visible = !SearchLeft.visible;
				btnHideLeft.visible = false;
				btnShowLeft.visible = true;
				vrLeft.x = vrLeft.x - 190;
			}
			protected function btnShowLeft_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				SearchLeft.visible = !SearchLeft.visible;
				btnHideLeft.visible = true;
				btnShowLeft.visible = false;
				vrLeft.x = vrLeft.x + 190;
			}
			protected function btnHideRight_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				SearchRight.visible = !SearchRight.visible;
				btnHideRight.visible = false;
				btnShowRight.visible = true;
				vrRight.x = vrRight.x + 180;
			}
			protected function btnShowRight_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				SearchRight.visible = !SearchRight.visible;
				btnHideRight.visible = true;
				btnShowRight.visible = false;
				vrRight.x = vrRight.x - 180;
			}
	
			protected function btnSearchLeft_clickHandler(event:MouseEvent):void
			{				
				searchAuthors.removeAll();
				
				var str:String = txtAuthorNameLeft.text;
				str = str.replace(/\s+/g, '');
				if(str != "")
				{

					dataLeft = new Object();
					var searchAuthorEvent:SearchAuthorEvent = new SearchAuthorEvent(txtAuthorNameLeft.text);
					searchAuthorEvent.dispatch();
					
				}
				else
				{
					txtAuthorNameLeft.text = "";
				}

			}
			
			protected function btnSearchRight_clickHandler(event:MouseEvent):void
			{
				searchAuthorsRight.removeAll();
				
				var str:String = txtAuthorNameRight.text;
				str = str.replace(/\s+/g, '');
				if(str != "")
				{
					dataRight = new Object();
					//search
					var searchAuthorRightEvent:SearchAuthorRightEvent = new SearchAuthorRightEvent(txtAuthorNameRight.text);
					searchAuthorRightEvent.dispatch();
					//end search
				}
				else
				{
					txtAuthorNameRight.text = "";
				}
			}
			
			protected function btnCoAuthorPath_clickHandler(event:MouseEvent):void
			{
				if(dataLeft.authorID == null){
					gm.visible = true;
				}
				// TODO Auto-generated method stub
				if(dataLeft.authorID>0 && dataRight.authorID>0 && isCoPath==false){
					var dataUrlReplace:Object = new Object();
					dataUrlReplace.urlReplace = "aid1="+dataLeft.authorID+"&aid2="+dataRight.authorID+"&action=path";
					setUrlReplace(dataUrlReplace);
				}

				isCoGraph = false;
				isCoPath = true;
				isCitation = false;
				isRecommend = false;
    
				SearchRight.visible = true;
				vrRight.visible = true;
				btnHideRight.visible = true;
				btnShowRight.visible = false;
				SearchRight.x = width - 190;
				vrRight.x = width - 200;
				btnHideRight.x = width - 210;
				btnShowRight.x = width - 30;
				
				
			}
			
			protected function btnCoAuthorGraph_clickHandler(event:MouseEvent):void
			{
				vrRight.x = width-30;
				
				if(dataLeft.authorID == null){
					gm.visible = true;
				}
				// TODO Auto-generated method stub
				if(dataLeft.authorID > 0 && isCoGraph==false){
					var dataUrlReplace:Object = new Object();
					dataUrlReplace.urlReplace = "aid1="+dataLeft.authorID+"&action=graph";
					setUrlReplace(dataUrlReplace);
				}
				isCoGraph = true;
				isCoPath = false;
				isCitation = false;
				isRecommend = false;

				SearchRight.visible = false;
				vrRight.visible = false;
				btnHideRight.visible = false;
				btnShowRight.visible = false;
			}
			
			protected function btnCitationGraph_clickHandler(event:MouseEvent):void
			{
				vrRight.x = width-30
					
				if(dataLeft.authorID == null){
					gm.visible = true;
				}
				// TODO Auto-generated method stub
				if(dataLeft.authorID > 0 && isCitation==false){
					var dataUrlReplace:Object = new Object();
					dataUrlReplace.urlReplace = "aid1="+dataLeft.authorID+"&action=citation";
					setUrlReplace(dataUrlReplace);
				}
				isCoGraph = false;
				isCoPath = false;
				isCitation = true;
				isRecommend = false;

				SearchRight.visible = false;
				vrRight.visible = false;
				btnHideRight.visible = false;
				btnShowRight.visible = false;
			}
			
			protected function btnRecommend_clickHandler(event:MouseEvent):void
			{
				vrRight.x = width-30
					
				if(dataLeft.authorID == null){
					gm.visible = true;
				}
				// TODO Auto-generated method stub
				if(dataLeft.authorID > 0 && isRecommend==false){
					var dataUrlReplace:Object = new Object();
					dataUrlReplace.urlReplace = "aid1="+dataLeft.authorID+"&action=recommend";
					setUrlReplace(dataUrlReplace);
				}
				isCoGraph = false;
				isCoPath = false;
				isCitation = false;
				isRecommend = true;

				SearchRight.visible = false;
				vrRight.visible = false;
				btnHideRight.visible = false;
				btnShowRight.visible = false;
			}
			protected function lst_changeHandlerLeft(e:IndexChangeEvent):void {
				gm.visible = false;
				dataLeft = e.currentTarget.selectedItem;
				var dataUrlReplace:Object = new Object();
				dataUrlReplace.urlReplace = "";
				if(isCoGraph){
					dataUrlReplace.urlReplace = "aid1="+dataLeft.authorID+"&action=graph";
				}
				if(isCoPath){
					dataUrlReplace.urlReplace = "aid1="+dataLeft.authorID+"&aid2="+dataRight.authorID+"&action=path";
				}
				if(isCitation){
					dataUrlReplace.urlReplace = "aid1="+dataLeft.authorID+"&action=citation";
				}
				if(isRecommend){
					dataUrlReplace.urlReplace = "aid1="+dataLeft.authorID+"&action=recommend";
				}
				
				setTitle(dataLeft);
				setUrlReplace(dataUrlReplace);
			}
			protected function lst_changeHandlerRight(e:IndexChangeEvent):void {
				dataRight = e.currentTarget.selectedItem;
				var dataUrlReplace:Object = new Object();
				dataUrlReplace.urlReplace = "";
				if(isCoPath){
					dataUrlReplace.urlReplace = "aid1="+dataLeft.authorID+"&aid2="+dataRight.authorID+"&action=path";
				}
				setUrlReplace(dataUrlReplace);
			}
			
			protected function onViewCoAuthorGraph(event:MouseEvent):void
			{
				if (dataLeft != null)
				{
					var authorID : int = dataLeft.authorID;
					var evt:ViewCoAuthorGraphEvent = new ViewCoAuthorGraphEvent(authorID);
					evt.dispatch();
				}
			}
			
			protected function onGetCollaboration(event:MouseEvent):void
			{
				if (dataLeft != null)
				{
					var authorID:int =dataLeft.authorID;
					var evt:GetCollaborationEvent = new GetCollaborationEvent(authorID);
					evt.dispatch();
				}
			}
			
			public function setTitle(data:Object):void{				
				var s:String;
				if(ExternalInterface.available){
					var wrapperFunction:String = "receiveComplexDataTypes";
					s = ExternalInterface.call(wrapperFunction,data);
				}else{
					s = "wrapper not available";
				}
				trace(s);
			}
			
			public function setUrlReplace(data:Object):void{
				var s:String;
				if(ExternalInterface.available){
					var wrapperFunction:String = "receiveUrlReplace";
					s = ExternalInterface.call(wrapperFunction,data);
				}else{
					s = "wrapper not available";
				}
				trace(s);
			}
			
			private function initGifImage():void{
 				
			}

			private function initGif():void{
				
			}
			
			/*----------*/
			// graph datastructure object
			private var graph:IGraph;
			// active layouter
			private var layouter:ILayoutAlgorithm;
			// edge renderer
			private var selectedEdgeRenderer:IEdgeRenderer;
			// root node to start with
			private var startRoot:IVisualNode;
			// this is used to display the number of visible items
			private var itemCount:int = 0;
			// important to ensure we are done with the main initialisation
			private var initDone:Boolean = false;
			
			private function initData():void{
				/* init a graph object with the XML data */
				graph = new org.un.cava.birdeye.ravis.graphLayout.data.Graph("XMLAsDocsGraph",false,xmldata);
			
				/* set the graph in the VGraph object, this automatically
				* initializes the VGraph items; 
				* note: vgraph is the id of the mxml specified VisualGraph component */
				visualGraph.graph = graph;
				
				/* set the default layouter type */
				layouter = new ConcentricRadialLayouter(visualGraph);
				visualGraph.layouter = layouter;
				
				/* set autofit */
				layouter.autoFitEnabled = true;
				
				/* set the layouter */
				visualGraph.edgeRendererFactory = new ClassFactory(CircularEdgeRenderer);
				
				/* set the visibility limit options, default 1 
				* a.k.a degrees of separation */
				visualGraph.maxVisibleDistance = 1;
				
				/* select a root node, most layouters requires a root node
				*  Note: Id 1 is referring to node id in the XML file */
				startRoot = graph.nodeByStringId("1").vnode;
				
				/* set if edge labels should be displayed */
				visualGraph.displayEdgeLabels = true;
				
				/* the following kicks it off .... */
				visualGraph.currentRootVNode = startRoot;
				initDone = true;
				visualGraph.draw();
			}
		]]>
	</fx:Script>
	<fx:Style source="assets/style/main.css"/>
 
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:XML id="xmldata" source="data/levelgraph.xml"/>
	</fx:Declarations>
	<s:BorderContainer id="SearchLeft" x="10" y="0" width="184" height="100%" borderVisible="false" initialize="initGifImage()">
		<s:BorderContainer x="11" y="1" width="158" height="32" borderColor="#727BFC"
						   color="#183CF0" symbolColor="#3E5BF0">
			<s:TextInput id="txtAuthorNameLeft" x="3" y="5" width="123" borderVisible="false"
						 color="#000000"/>
			<s:Button id="btnSearchLeft" x="128" y="2" width="25" height="25" buttonMode="true"
					  enabled="true" icon="@Embed('assets/gui/button_Search.png')" useHandCursor="true"
					  click="btnSearchLeft_clickHandler(event)" />
		</s:BorderContainer>
		<s:Label x="10" y="40" text="Result"/>
		<s:List id="lstLeft" x="10" y="60" width="170" height="{height-70}" borderVisible="false"
				changing="lst_changeHandlerLeft(event)" 
				dataProvider="{searchAuthors}"
				itemRenderer="views.CustomItemRen" useHandCursor="true">
			
			<s:layout>
				<s:VerticalLayout gap="0"
								  horizontalAlign="justify"
								  requestedRowCount="5" />
			</s:layout>
			
		</s:List>
		<s:SWFLoader id="loadingSearchLeft" x="{SearchLeft.width/2-20}" y="{SearchLeft.height/2-100}"
				  width="24" height="24" initialize="initGif()" 
				  source="@Embed('assets/gui/ajax-loader.swf')" visible="{!lstLeft.visible}"/>
		
	</s:BorderContainer>
	

	
	<mx:VRule id="vrLeft" x="207" y="1" width="2" height="100%" chromeColor="#000000"/>
	<mx:Button id="btnHideLeft" x="196" y="{(height/2)-20}" width="25" height="25"
			   click="btnHideLeft_clickHandler(event)" cornerRadius="12"
			   icon="@Embed('assets/gui/button_hide.png')" paddingLeft="0" paddingRight="0"
			   overIcon="@Embed('assets/gui/btn_hide_hover.png')"
			   buttonMode="true" useHandCursor="true"
			   visible="true"/>
	<mx:Button id="btnShowLeft" x="6" y="{(height/2)-20}" width="25" height="25"
			   click="btnShowLeft_clickHandler(event)" cornerRadius="12"
			   icon="@Embed('assets/gui/btn_show.png')" paddingLeft="0" paddingRight="0"
			   overIcon="@Embed('assets/gui/btn_show_hover.png')"
			   buttonMode="true" useHandCursor="true"
			   visible="false"/>
	
	<mx:Canvas id="graphBody"
			   x ="{vrLeft.x + 15}" y="31"
			   height="100%" width="{vrRight.x - vrLeft.x - 25}" borderStyle="solid">
		<visual:VisualGraph id="visualGraph" width="100%" height="100%" 
							left="0" right="0" top="0" bottom="5" backgroundColor="#FFFFFF" alpha="1"
							resize="visualGraph.draw(VisualGraph.DF_RESET_LL)"
							itemRenderer="views.renderers.nodes.mxml.customNodeRenderer"
							edgeLabelRenderer="views.renderers.edgelabels.mxml.customEdgeLabelRenderer" 
							visibilityLimitActive="true">
			
		</visual:VisualGraph>
		
		<s:HGroup id="gm" x="100" y="250" visible="false">
			<s:Label text="Sory, the author does not exist." fontWeight="bold" fontSize="12" visible="{!visualGraph.visible}"/>
		</s:HGroup>
		
		<s:SWFLoader id="loadingDrawGraph" x="10" y="10" width="24" height="24" autoLoad="true"
					 initialize="initGif()" source="@Embed('assets/gui/ajax-loader.swf')" visible="{!visualGraph.visible}"/>
		

	</mx:Canvas>
	
	<s:BorderContainer id="SearchRight" x="760" y="0" width="184" height="100%" borderVisible="false" visible="false">
		<s:BorderContainer x="11" y="1" width="158" height="32" borderColor="#727BFC"
						   color="#183CF0" symbolColor="#3E5BF0">
			<s:TextInput id="txtAuthorNameRight" x="3" y="5" width="123" borderVisible="false"
						 color="#000000"/>
			<s:Button id="btnSearchRight" x="128" y="2" width="25" height="25" icon="@Embed('assets/gui/button_Search.png')"
					  buttonMode="true" useHandCursor="true"
					  click="btnSearchRight_clickHandler(event)"/>
		</s:BorderContainer>
		<s:Label x="10" y="40" text="Result"/>
		<s:List id="lstRight" x="10" y="60" width="170" height="{height-70}" borderVisible="false"
				changing="lst_changeHandlerRight(event)"
				itemRenderer="views.CustomItemRen" useHandCursor="true"
				dataProvider="{searchAuthorsRight}">
			
			<s:layout>
				<s:VerticalLayout gap="0"
								  horizontalAlign="justify"
								  requestedRowCount="5" />
			</s:layout>
			
		</s:List>

		<s:SWFLoader id="loadingSearchRight" initialize="initGif()" 
					 width="24" height="24" 
					 x="{SearchRight.width/2-20}" y="{SearchRight.height/2-100}"
					 source="@Embed('assets/gui/ajax-loader.swf')"/>
		
	</s:BorderContainer>

	
	<mx:VRule id="vrRight" x="{width-30}" y="1" width="2" height="100%" chromeColor="#000000" visible="false"/>
	<mx:Button id="btnHideRight" x="730" y="{(height/2)-20}" width="25" height="25"
			   click="btnHideRight_clickHandler(event)" cornerRadius="12"
			   icon="@Embed('assets/gui/btn_show.png')" paddingLeft="0" paddingRight="0"
			   overIcon="@Embed('assets/gui/btn_show_hover.png')"
			   buttonMode="true" useHandCursor="true"
			   visible="false"/>
	<mx:Button id="btnShowRight" x="920" y="{(height/2)-20}" width="25" height="25"
			   click="btnShowRight_clickHandler(event)" cornerRadius="12"
			   icon="@Embed('assets/gui/button_hide.png')" paddingLeft="0" paddingRight="0"
			   overIcon="@Embed('assets/gui/btn_hide_hover.png')"
			   buttonMode="true" useHandCursor="true"
			   visible="false"/>
	<mx:Button id="btnCoAuthorGraph" x="217" y="1" label="Co-author Graph"
			   click="btnCoAuthorGraph_clickHandler(event)" />
	<mx:Button id="btnCoAuthorPath" x="331" y="1" label="Co-author Path"
			   click="btnCoAuthorPath_clickHandler(event)" enabled="true"/>
	<mx:Button id="btnCitationGraph" x="436" y="1" label="Citation Graph"
			   click="btnCitationGraph_clickHandler(event)"/>
	<s:Button id="btnRecommend" x="537" y="1" label="Recommend"
			  click="btnRecommend_clickHandler(event)"/>
	
</s:Group>
