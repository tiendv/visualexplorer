<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:visual="org.un.cava.birdeye.ravis.graphLayout.visual.*"
		 xmlns:visualDP="graphLayout.visual.*"
		 xmlns:edgeRenderers="org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.edgeRenderers.*"
		 width="100%" height="100%" creationComplete="group1_creationCompleteHandler(event)"
		 initialize="initData();">
	<fx:Script>
		<![CDATA[
			import business.events.GetAuthorEvent;
			import business.events.GetAuthorRightEvent;
			import business.events.GetCollaborationEvent;
			import business.events.SearchAuthorEvent;
			import business.events.SearchAuthorRightEvent;
			import business.events.ViewCoAuthorGraphEvent;
			import business.events.ViewCoPathGraphEvent;
			
			import flash.sampler.NewObjectSample;
			
			import flashx.textLayout.events.ModelChange;
			import flashx.textLayout.factory.TruncationOptions;
			
			import graphLayout.data.GraphDP;
			import graphLayout.layout.CustomLayouter;
			
			import models.GraphLocator;
			import models.ModelLocator;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.xml.SimpleXMLDecoder;
			
			import org.un.cava.birdeye.ravis.assets.icons.EmbeddedIcons;
			import org.un.cava.birdeye.ravis.graphLayout.data.IGraph;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ConcentricRadialLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.layout.DirectPlacementLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualNode;
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BaseEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.CircularEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedArrowEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.DirectedBalloonEdgeRenderer;
			
			import spark.events.IndexChangeEvent;
			
			import utils.GraphUtil;
			
			import valueobjects.AuthorOrgObject;
			import valueobjects.CoAuthorObject;
			
			[Bindable]
			public var aid:int;
			[Bindable]
			public var aid1:int;
			[Bindable]
			public var action:String;
			
			[Bindable]
			public var searchAuthors:ArrayCollection = ModelLocator.getInstance().searchedAuthors;
			[Bindable]
			public var searchAuthorsRight:ArrayCollection = ModelLocator.getInstance().searchedAuthorsRight;
			
			public var dataLeft:Object = new Object();
			public var dataRight:Object = new Object();
			[Bindable]
			public static var isCoGraph:Boolean = true;
			[Bindable]
			public static var isCoPath:Boolean = false;
			[Bindable]
			public static var isCitation:Boolean = false;
			[Bindable]
			public static var isRecommend:Boolean = false;
			[Bindable]
			public static var searchRightVisible:Boolean = false;
			[Bindable]
			public static var vrRightVisible:Boolean = false;
			[Bindable]
			public static var btnHideRightVisible:Boolean = false;
			[Bindable]
			public static var btnShowRightVisible:Boolean = false;
			[Bindable]
			public static var searchRightX:Number = 0;
			[Bindable]
			public static var vrRightX:Number = 0;
			[Bindable]
			public static var btnHideRightX:Number = 730;
			[Bindable]
			public static var btnShowRightX:Number = 920;

			protected function btnHideLeft_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				SearchLeft.visible = !SearchLeft.visible;
				btnHideLeft.visible = false;
				btnShowLeft.visible = true;
				vrLeft.x = vrLeft.x - 190;
			}
			protected function btnShowLeft_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				SearchLeft.visible = !SearchLeft.visible;
				btnHideLeft.visible = true;
				btnShowLeft.visible = false;
				vrLeft.x = vrLeft.x + 190;
			}
			protected function btnHideRight_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				searchRightVisible = !searchRightVisible;
				btnHideRightVisible = false;
				btnShowRightVisible = true;
				vrRightX = vrRightX + 180
			}
			protected function btnShowRight_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				searchRightVisible = !searchRightVisible;
				btnHideRightVisible = true;
				btnShowRightVisible = false;
				vrRightX = vrRightX - 180;
			}
	
			protected function btnSearchLeft_clickHandler(event:MouseEvent):void
			{				
				if(!GraphLocator.getInstance().waiting && !ModelLocator.getInstance().waitingSearchLeft)
				{
					var str:String = txtAuthorNameLeft.text;
					str = str.replace(/\s+/g, '');
					if(str != "")
					{
						ModelLocator.getInstance().waitingSearchLeft = true;
						searchAuthors.removeAll();
						dataLeft = new Object();
						var searchAuthorEvent:SearchAuthorEvent = new SearchAuthorEvent(txtAuthorNameLeft.text);
						searchAuthorEvent.dispatch();	
						GraphLocator.getInstance().graph.dataProvider.removeAll();
					}
					else
					{
						txtAuthorNameLeft.text = "";
					}
				}
			}
			
			protected function btnSearchRight_clickHandler(event:MouseEvent):void
			{
				if(!GraphLocator.getInstance().waiting && !ModelLocator.getInstance().waitingSearchRight){
					var str:String = txtAuthorNameRight.text;
					str = str.replace(/\s+/g, '');
					if(str != "")
					{
						ModelLocator.getInstance().waitingSearchRight = true;
						searchAuthorsRight.removeAll();
						dataRight = new Object();
						//search
						var searchAuthorRightEvent:SearchAuthorRightEvent = new SearchAuthorRightEvent(txtAuthorNameRight.text);
						searchAuthorRightEvent.dispatch();
						//end search
					}
					else
					{
						txtAuthorNameRight.text = "";
					}
				}
			}
			
			protected function btnCoAuthorPath_clickHandler(event:MouseEvent):void
			{
				if(!GraphLocator.getInstance().waiting)
				{
					if(dataLeft.authorID == null){
						gm.visible = true;
					}
					GraphLocator.getInstance().graph.dataProvider.removeAll();
					// TODO Auto-generated method stub
					if(dataLeft.authorID>0 && dataRight.authorID>0 && isCoPath==false){
						var dataUrlReplace:Object = new Object();
						dataUrlReplace.urlReplace = "aid="+dataLeft.authorID+"&aid1="+dataRight.authorID+"&action=path";
						setUrlReplace(dataUrlReplace);
					}
					//--
					if(GraphLocator.getInstance().idRoot > 0){
						GraphLocator.getInstance().waiting = true;
						var coPathEvent:ViewCoPathGraphEvent = new ViewCoPathGraphEvent(GraphLocator.getInstance().idRoot,GraphLocator.getInstance().idRootRight);
						coPathEvent.dispatch();
					}

					
					isCoGraph = false;
					isCoPath = true;
					isCitation = false;
					isRecommend = false;
					GraphLocator.getInstance().action = 2;
	    
					searchRightVisible = true;
					vrRightVisible = true;
					btnHideRightVisible = true;
					btnShowRightVisible = false;
					searchRightX = width - 190;
					vrRightX = width - 200;
					btnHideRightX = width - 210;
					btnShowRightX = width - 30;
				}
			}
			
			protected function btnCoAuthorGraph_clickHandler(event:MouseEvent):void
			{
				if(!GraphLocator.getInstance().waiting)
				{
					vrRightX = width-30;
					
					if(dataLeft.authorID == null){
						gm.visible = true;
					}
					GraphLocator.getInstance().graph.dataProvider.removeAll();
					// TODO Auto-generated method stub
					if(dataLeft.authorID > 0 && isCoGraph==false){
						var dataUrlReplace:Object = new Object();
						dataUrlReplace.urlReplace = "aid="+dataLeft.authorID+"&action=graph";
						setUrlReplace(dataUrlReplace);
					}
					//-- 
					if(GraphLocator.getInstance().idRoot > 0){
						GraphLocator.getInstance().waiting = true;
						var coauthorEvent:ViewCoAuthorGraphEvent = new ViewCoAuthorGraphEvent(GraphLocator.getInstance().idRoot);
						coauthorEvent.dispatch();
					}
					isCoGraph = true;
					isCoPath = false;
					isCitation = false;
					isRecommend = false;
					GraphLocator.getInstance().action = 1;
	
					searchRightVisible = false;
					vrRightVisible = false;
					btnHideRightVisible = false;
					btnShowRightVisible = false;
				}
			}
			
			protected function btnCitationGraph_clickHandler(event:MouseEvent):void
			{
				if(!GraphLocator.getInstance().waiting)
				{
					vrRightX = width-30
						
					if(dataLeft.authorID == null){
						gm.visible = true;
					}
					GraphLocator.getInstance().graph.dataProvider.removeAll();

					// TODO Auto-generated method stub
					if(dataLeft.authorID > 0 && isCitation==false){
						var dataUrlReplace:Object = new Object();
						dataUrlReplace.urlReplace = "aid="+dataLeft.authorID+"&action=citation";
						setUrlReplace(dataUrlReplace);
						//GraphLocator.getInstance().waiting = true;
						//thuc hien even copath
					}
					isCoGraph = false;
					isCoPath = false;
					isCitation = true;
					isRecommend = false;
					GraphLocator.getInstance().action = 3;
	
					searchRightVisible = false;
					vrRightVisible = false;
					btnHideRightVisible = false;
					btnShowRightVisible = false;

				}
			}
			
			protected function btnRecommend_clickHandler(event:MouseEvent):void
			{
				if(!GraphLocator.getInstance().waiting)
				{
					vrRightX = width-30
						
					if(dataLeft.authorID == null){
						gm.visible = true;
					}
					GraphLocator.getInstance().graph.dataProvider.removeAll();

					// TODO Auto-generated method stub
					if(dataLeft.authorID > 0 && isRecommend==false){
						var dataUrlReplace:Object = new Object();
						dataUrlReplace.urlReplace = "aid="+dataLeft.authorID+"&action=recommend";
						setUrlReplace(dataUrlReplace);
					}
					//-- 
					if(GraphLocator.getInstance().idRoot > 0){
						GraphLocator.getInstance().waiting = true;
						var getCollaborationEvent:GetCollaborationEvent = new GetCollaborationEvent(GraphLocator.getInstance().idRoot);
						getCollaborationEvent.dispatch();
					}
					isCoGraph = false;
					isCoPath = false;
					isCitation = false;
					isRecommend = true;
					GraphLocator.getInstance().action = 4;
	
					searchRightVisible = false;
					vrRightVisible = false;
					btnHideRightVisible = false;
					btnShowRightVisible = false;

				}
			}
			protected function lst_changeHandlerLeft(e:IndexChangeEvent):void {			
				gm.visible = false;
				dataLeft = e.currentTarget.selectedItem;
				var dataUrlReplace:Object = new Object();
				dataUrlReplace.urlReplace = "";
				GraphLocator.getInstance().idRoot = dataLeft.authorID;
				if(isCoGraph){
					dataUrlReplace.urlReplace = "aid="+dataLeft.authorID+"&action=graph";
					GraphLocator.getInstance().waiting = true;
					var coauthorEvent:ViewCoAuthorGraphEvent = new ViewCoAuthorGraphEvent(dataLeft.authorID);
					coauthorEvent.dispatch();
					GraphLocator.getInstance().graph.dataProvider.removeAll();
				}
				if(isCoPath){
					dataUrlReplace.urlReplace = "aid="+dataLeft.authorID+"&aid1="+dataRight.authorID+"&action=path";
					GraphLocator.getInstance().waiting = true;
					var coPathEvent:ViewCoPathGraphEvent = new ViewCoPathGraphEvent(GraphLocator.getInstance().idRoot,GraphLocator.getInstance().idRootRight);
					coPathEvent.dispatch();
					GraphLocator.getInstance().graph.dataProvider.removeAll();
				}
				if(isCitation){
					dataUrlReplace.urlReplace = "aid="+dataLeft.authorID+"&action=citation";
				}
				if(isRecommend){
					dataUrlReplace.urlReplace = "aid="+dataLeft.authorID+"&action=recommend";
					GraphLocator.getInstance().waiting = true;
					var getCollaborationEvent:GetCollaborationEvent = new GetCollaborationEvent(dataLeft.authorID);
					getCollaborationEvent.dispatch();
					GraphLocator.getInstance().graph.dataProvider.removeAll();
				}
				
				setTitle(dataLeft);
				setUrlReplace(dataUrlReplace);
				
			}
			protected function lst_changeHandlerRight(e:IndexChangeEvent):void {
				dataRight = e.currentTarget.selectedItem;
				var dataUrlReplace:Object = new Object();
				dataUrlReplace.urlReplace = "";
				GraphLocator.getInstance().idRootRight = dataRight.authorID;
				if(isCoPath){
					dataUrlReplace.urlReplace = "aid="+dataLeft.authorID+"&aid1="+dataRight.authorID+"&action=path";
					GraphLocator.getInstance().waiting = true;
					var coPathEvent:ViewCoPathGraphEvent = new ViewCoPathGraphEvent(GraphLocator.getInstance().idRoot,GraphLocator.getInstance().idRootRight);
					coPathEvent.dispatch();
					GraphLocator.getInstance().graph.dataProvider.removeAll();
				}
				setUrlReplace(dataUrlReplace);
			}
			
			protected function onViewCoAuthorGraph(event:MouseEvent):void
			{
				if (dataLeft != null)
				{
					var authorID : int = dataLeft.authorID;
					var evt:ViewCoAuthorGraphEvent = new ViewCoAuthorGraphEvent(authorID);
					evt.dispatch();
				}
			}
			
			protected function onGetCollaboration(event:MouseEvent):void
			{
				if (dataLeft != null)
				{
					var authorID:int =dataLeft.authorID;
					var evt:GetCollaborationEvent = new GetCollaborationEvent(authorID);
					evt.dispatch();
				}
			}
			
			public function setTitle(data:Object):void{				
				var s:String;
				if(ExternalInterface.available){
					var wrapperFunction:String = "receiveComplexDataTypes";
					s = ExternalInterface.call(wrapperFunction,data);
				}else{
					s = "wrapper not available";
				}
				trace(s);
			}
			
			public function setUrlReplace(data:Object):void{
				var s:String;
				if(ExternalInterface.available){
					var wrapperFunction:String = "receiveUrlReplace";
					s = ExternalInterface.call(wrapperFunction,data);
				}else{
					s = "wrapper not available";
				}
				trace(s);
			}
			
			
			/*----------*/
			// active layouter
			private var layouter:ILayoutAlgorithm;
			// edge renderer
			private var selectedEdgeRenderer:IEdgeRenderer;
			// root node to start with
			private var startRoot:IVisualNode;
			// this is used to display the number of visible items
			private var itemCount:int = 0;
			// important to ensure we are done with the main initialisation
			private var initDone:Boolean = false;
			
			private function initData():void{
				vrRightX = FlexGlobals.topLevelApplication.width - 30;

				Security.loadPolicyFile("http://academic.research.microsoft.com/crossdomain.xml");
				/* init a graph object with the XML data */
 				GraphLocator.getInstance().graph = new GraphDP("XMLAsDocsGraph", false, new XML("<Graph></Graph>")); 			
				//GraphLocator.getInstance().graph.dataProvider.removeAll();
				visualGraph.graph = GraphLocator.getInstance().graph;

				/* set the default layouter type */
				layouter = new graphLayout.layout.CustomLayouter(visualGraph);
				visualGraph.layouter = layouter;
				
				/* set autofit */
				layouter.autoFitEnabled = true;
				
				/* set the layouter */
				visualGraph.edgeRendererFactory = new ClassFactory(BaseEdgeRenderer);
				
				visualGraph.maxVisibleDistance = 1;
				
				//startRoot = visualGraph.graph.nodeByStringId("1").vnode;
				
				/* set if edge labels should be displayed */
				visualGraph.displayEdgeLabels = true;
				
				/* the following kicks it off .... */
				//visualGraph.currentRootVNode = startRoot;
				visualGraph.addEventListener(MouseEvent.MOUSE_WHEEL,updateVScale);
				initDone = true;
				
				//visualGraph.draw();
			}
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				aid = FlexGlobals.topLevelApplication.parameters.aid;
				aid1 = FlexGlobals.topLevelApplication.parameters.aid1;
				action = FlexGlobals.topLevelApplication.parameters.action;
				if(aid>0)
				{
					//search author by id
					ModelLocator.getInstance().waitingSearchLeft = true;
					dataLeft = new Object();
					dataLeft.authorID = aid;
					var getAuthorEvent:GetAuthorEvent = new GetAuthorEvent(aid);
					getAuthorEvent.dispatch();
					GraphLocator.getInstance().idRoot = aid;
					
					//view graph
					if(action.toLowerCase()=="graph")
					{//co-graph
						GraphLocator.getInstance().waiting = true;
						isCoGraph = true;
						isCoPath = false;
						isCitation = false;
						isRecommend = false;
						GraphLocator.getInstance().action = 1;
						var coauthorEvent:ViewCoAuthorGraphEvent = new ViewCoAuthorGraphEvent(aid);
						coauthorEvent.dispatch();
						gm.visible = false;
					}
					else if(action.toLowerCase()=="path")
					{//path
						isCoGraph = false;
						isCoPath = true;
						isCitation = false;
						isRecommend = false;
						//-- hien thi SearchRight
						Graph.searchRightVisible = true;
						Graph.vrRightVisible = true;
						Graph.btnHideRightVisible = true;
						Graph.btnShowRightVisible = false;
						Graph.searchRightX = FlexGlobals.topLevelApplication.width - 190; 
						Graph.vrRightX = FlexGlobals.topLevelApplication.width - 200;
						Graph.btnHideRightX = FlexGlobals.topLevelApplication.width - 210;
						Graph.btnShowRightX = FlexGlobals.topLevelApplication.width - 30;
						
						if(aid1>0)
						{//search author by id
							ModelLocator.getInstance().waitingSearchRight = true;
							dataRight = new Object();
							dataRight.authorID = aid1;
							GraphLocator.getInstance().idRootRight = dataRight.authorID;
						}
						else
						{//search author by default id
							ModelLocator.getInstance().waitingSearchRight = true;
							dataRight = new Object();
							dataRight.authorID = GraphLocator.getInstance().idRootRight;//==1
						}
						//get author
						GraphLocator.getInstance().action = 2;
						var getAuthorRightEvent:GetAuthorRightEvent = new GetAuthorRightEvent(GraphLocator.getInstance().idRootRight);
						getAuthorRightEvent.dispatch();
						gm.visible = false;
						//search and draw graph co-path
						//---
						
					}
					else if(action.toLowerCase()=="citation")
					{//citation
						isCoGraph = false;
						isCoPath = false;
						isCitation = true;
						isRecommend = false;
						GraphLocator.getInstance().action = 3;
						gm.visible = false;
						//search and draw graph citation
						//---
					}
					else if(action.toLowerCase()=="recommend")
					{//recommend
						isCoGraph = false;
						isCoPath = false;
						isCitation = false;
						isRecommend = true;
						GraphLocator.getInstance().waiting = true;
						GraphLocator.getInstance().action = 4;
						var getCollaborationEvent:GetCollaborationEvent = new GetCollaborationEvent(aid);
						getCollaborationEvent.dispatch();
						gm.visible = false;
					}
				}
			}
			
			//---
			public function updateVScale(event:MouseEvent):void {
				
				if(bzoom == null) {
					return;
				}
				
				if(visualGraph == null) {
					return;
				}
				
				// Handle the update for mousewheel events outside the component
				if(event != null) {
					if(event.delta != 0) {
						if(bzoom.value == bzoom.minimum) {
							if(event.delta > 0) {
								bzoom.value = bzoom.value+(event.delta*0.01);
								visualGraph.scale = bzoom.value;
							}
						}
						else if(bzoom.value == bzoom.maximum) {
							if(event.delta < 0) {
								bzoom.value = bzoom.value+(event.delta*0.01);
								visualGraph.scale = bzoom.value;
							}
						} else {
							bzoom.value = bzoom.value+(event.delta*0.01);
							visualGraph.scale = bzoom.value;
						}
					}
				}
					// Handle the update for the zoom buttons
				else {
					if(bzoom.value <= bzoom.minimum) {
						bzoom.value = bzoom.minimum;
						return;
					} else {
						visualGraph.scale = bzoom.value;
					}
					
					if(bzoom.value >= bzoom.maximum) {
						bzoom.value = bzoom.maximum;
						return;
					} else {
						visualGraph.scale = bzoom.value;
					}
				}
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				GraphLocator.getInstance().idRoot = 1;
				visualGraph.layouter = new graphLayout.layout.CustomLayouter(visualGraph);
				visualGraph.layouter.layoutChanged = true;
				visualGraph.displayEdgeLabels = true;
				GraphLocator.getInstance().graph.dataProvider.removeAll();
				GraphLocator.getInstance().graph.dataProvider.addItem(xmldata);
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				GraphLocator.getInstance().idRoot = 1;
				visualGraph.layouter = new DirectPlacementLayouter(visualGraph);
				visualGraph.layouter.layoutChanged = true;
				visualGraph.displayEdgeLabels = true;
				GraphLocator.getInstance().idRootRight = 14;
				GraphLocator.getInstance().graph.dataProvider.removeAll();
				GraphLocator.getInstance().graph.dataProvider.addItem(graph);
			}

			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				GraphLocator.getInstance().idRoot = 1;
				visualGraph.layouter = new DirectPlacementLayouter(visualGraph);
				visualGraph.layouter.layoutChanged = true;
				visualGraph.displayEdgeLabels = true;
				GraphLocator.getInstance().graph.dataProvider.removeAll();
				GraphLocator.getInstance().graph.dataProvider.addItem(citation);
				// phuong phap tinh x, y citation
				// goc alfa = 90/ (tong so tac gia - tac gia goc - 1) = 90/(tong so tac gia - 2)
				// toa do node goc : x = 60 , y=60
				// toa do node con:
				// x = cos(alfa) * do dai canh + nodeRoot.X; 
				// y = sin(alfa) * do dai canh + nodeRoot.Y;
				// do dai canh thay doi dai ngan theo chi so citation 
				// file citation.xml mac dinh do dai = nhau = 860
				
			}			
			
		]]>
	</fx:Script>
	<fx:Style source="assets/style/main.css"/>
 
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<fx:XML id="xmldata" source="data/levelgraph.xml"/>
		<fx:XML id="citation" source="data/citation.xml"/>
		<fx:XML id="graph" source="data/graph.xml"/>
		
	</fx:Declarations>
	<s:BorderContainer id="SearchLeft" x="10" y="0" width="184" height="100%" borderVisible="false">
		<s:BorderContainer x="11" y="1" width="158" height="32" borderColor="#727BFC"
						   color="#183CF0" symbolColor="#3E5BF0">
			<s:TextInput id="txtAuthorNameLeft" x="3" y="5" width="123" borderVisible="false"
						 color="#000000"/>
			<s:Button id="btnSearchLeft" x="128" y="2" width="25" height="25" buttonMode="true"
					  enabled="true" icon="@Embed('assets/gui/button_Search.png')" useHandCursor="true"
					  click="btnSearchLeft_clickHandler(event)" />
		</s:BorderContainer>
		<s:Label x="10" y="40" text="Result"/>
		<s:List id="lstLeft" x="10" y="60" width="170" height="{height-70}" borderVisible="false"
				changing="lst_changeHandlerLeft(event)" 
				dataProvider="{searchAuthors}"
				itemRenderer="views.CustomItemRen" useHandCursor="true" enabled="{!GraphLocator.getInstance().waiting}">
			
			<s:layout>
				<s:VerticalLayout gap="0"
								  horizontalAlign="justify"
								  requestedRowCount="5" />
			</s:layout>
			
		</s:List>
		<s:SWFLoader id="loadingSearchLeft" x="{SearchLeft.width/2-20}" y="{SearchLeft.height/2-100}"
				  width="24" height="24"
				  source="@Embed('assets/gui/ajax-loader.swf')" visible="{ModelLocator.getInstance().waitingSearchLeft}"/>
		
	</s:BorderContainer>
	

	
	<mx:VRule id="vrLeft" x="207" y="1" width="2" height="100%" chromeColor="#000000"/>
	<mx:Button id="btnHideLeft" x="196" y="{(height/2)-20}" width="25" height="25"
			   click="btnHideLeft_clickHandler(event)" cornerRadius="12"
			   icon="@Embed('assets/gui/button_hide.png')" paddingLeft="0" paddingRight="0"
			   overIcon="@Embed('assets/gui/btn_hide_hover.png')"
			   buttonMode="true" useHandCursor="true"
			   visible="true"/>
	<mx:Button id="btnShowLeft" x="6" y="{(height/2)-20}" width="25" height="25"
			   click="btnShowLeft_clickHandler(event)" cornerRadius="12"
			   icon="@Embed('assets/gui/btn_show.png')" paddingLeft="0" paddingRight="0"
			   overIcon="@Embed('assets/gui/btn_show_hover.png')"
			   buttonMode="true" useHandCursor="true"
			   visible="false"/>
	
	<mx:Canvas id="graphBody"
			   x ="{vrLeft.x + 15}" y="31"
			   height="100%" width="{vrRightX - vrLeft.x - 25}">
		<visualDP:VisualGraphDP id="visualGraph" width="100%" height="100%" 
							left="0" right="0" top="0" bottom="5" backgroundColor="#FFFFFF" alpha="1"
							resize="visualGraph.draw(VisualGraph.DF_RESET_LL)"
							itemRenderer="views.renderers.nodes.mxml.customNodeRenderer"
							edgeLabelRenderer="views.renderers.edgelabels.mxml.customEdgeLabelRenderer" 
							visibilityLimitActive="true">
			
		</visualDP:VisualGraphDP>
		
		<s:Label id="gm" x="100" y="250" text="Sory, the author does not exist." fontWeight="bold" fontSize="12" visible="true"/>
		
		<s:SWFLoader id="loadingDrawGraph" x="10" y="10" width="24" height="24" autoLoad="true"
					 source="@Embed('assets/gui/ajax-loader.swf')" visible="{GraphLocator.getInstance().waiting}"/>
		<mx:HBox width="200" x="{graphBody.width-200}" y="{graphBody.height-30}">
			<mx:Button id="minusZoom" width="20" height="20"
					   click="bzoom.value=bzoom.value-.25;updateVScale(null);" cornerRadius="5"
					   icon="{EmbeddedIcons.zoomoutIcon}"/>		
			<mx:HSlider id="bzoom" width="140" change="updateVScale(null)" liveDragging="true"
						maximum="3" minimum=".25" tickInterval=".25" value="1"/>
			<mx:Button id="plusZoom" width="20" height="20"
					   click="bzoom.value=bzoom.value+.25;updateVScale(null);" cornerRadius="5"
					   icon="{EmbeddedIcons.zoominIcon}"/>	
		</mx:HBox>

	</mx:Canvas>
	
	<s:BorderContainer id="SearchRight" x="{searchRightX}" y="0" width="184" height="100%" borderVisible="false" visible="{searchRightVisible}">
		<s:BorderContainer x="11" y="1" width="158" height="32" borderColor="#727BFC"
						   color="#183CF0" symbolColor="#3E5BF0">
			<s:TextInput id="txtAuthorNameRight" x="3" y="5" width="123" borderVisible="false"
						 color="#000000"/>
			<s:Button id="btnSearchRight" x="128" y="2" width="25" height="25" icon="@Embed('assets/gui/button_Search.png')"
					  buttonMode="true" useHandCursor="true"
					  click="btnSearchRight_clickHandler(event)"/>
		</s:BorderContainer>
		<s:Label x="10" y="40" text="Result"/>
		<s:List id="lstRight" x="10" y="60" width="170" height="{height-70}" borderVisible="false"
				changing="lst_changeHandlerRight(event)"
				itemRenderer="views.CustomItemRen" useHandCursor="true"
				dataProvider="{searchAuthorsRight}" enabled="{!GraphLocator.getInstance().waiting}">
			
			<s:layout>
				<s:VerticalLayout gap="0"
								  horizontalAlign="justify"
								  requestedRowCount="5" />
			</s:layout>
			
		</s:List>

		<s:SWFLoader id="loadingSearchRight" 
					 width="24" height="24" 
					 x="{SearchRight.width/2-20}" y="{SearchRight.height/2-100}"
					 source="@Embed('assets/gui/ajax-loader.swf')" visible="{ModelLocator.getInstance().waitingSearchRight}"/>
		
	</s:BorderContainer>

	
	<mx:VRule id="vrRight" x="{vrRightX}" y="1" width="2" height="100%" chromeColor="#000000" visible="{vrRightVisible}"/>
	<mx:Button id="btnHideRight" x="{btnHideRightX}" y="{(height/2)-20}" width="25" height="25"
			   click="btnHideRight_clickHandler(event)" cornerRadius="12"
			   icon="@Embed('assets/gui/btn_show.png')" paddingLeft="0" paddingRight="0"
			   overIcon="@Embed('assets/gui/btn_show_hover.png')"
			   buttonMode="true" useHandCursor="true"
			   visible="{btnHideRightVisible}"/>
	<mx:Button id="btnShowRight" x="{btnShowRightX}" y="{(height/2)-20}" width="25" height="25"
			   click="btnShowRight_clickHandler(event)" cornerRadius="12"
			   icon="@Embed('assets/gui/button_hide.png')" paddingLeft="0" paddingRight="0"
			   overIcon="@Embed('assets/gui/btn_hide_hover.png')"
			   buttonMode="true" useHandCursor="true"
			   visible="{btnShowRightVisible}"/>
	<mx:Button id="btnCoAuthorGraph" x="217" y="1" label="Co-author Graph"
			   click="btnCoAuthorGraph_clickHandler(event)" enabled="{!isCoGraph}"/>
	<mx:Button id="btnCoAuthorPath" x="331" y="1" label="Co-author Path"
			   click="btnCoAuthorPath_clickHandler(event)" enabled="{!isCoPath}"/>
	<mx:Button id="btnCitationGraph" x="436" y="1" label="Citation Graph"
			   click="btnCitationGraph_clickHandler(event)" enabled="{!isCitation}"/>
	<s:Button id="btnRecommend" x="537" y="1" label="Recommend"
			  click="btnRecommend_clickHandler(event)" enabled="{!isRecommend}"/>
	<s:Button x="307" y="182" label="co-graph &amp; recommend" click="button1_clickHandler(event)"/>
	<s:Button x="307" y="214" label="co-path " click="button2_clickHandler(event)"/>
	<s:Button x="307" y="252" label="citation" click="button3_clickHandler(event)"/>
	
</s:Group>
