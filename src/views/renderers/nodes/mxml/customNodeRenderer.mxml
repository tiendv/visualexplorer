<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:local="org.un.cava.birdeye.ravis.assets.icons.primitives.*"
		   xmlns:nodes="org.un.cava.birdeye.ravis.components.renderers.nodes.*"
		   creationComplete="setNode()" initialize="init();">
	
	<mx:VBox horizontalAlign="center" horizontalScrollPolicy="off" verticalAlign="top"
			 verticalScrollPolicy="off" verticalGap="0">
		<mx:VBox horizontalAlign="center" rollOutEffect="{zoomOut}" rollOver="bringToTop(event)"
				rollOverEffect="{zoomIn}" verticalGap="-10" verticalAlign="top">
			
			<mx:Box id="box" horizontalAlign="center" verticalAlign="middle">
				<mx:Box id="box_img" backgroundColor="#727BFC"
						horizontalAlign="center" toolTip="{this.data.data.@desc}" verticalAlign="middle" resize="box_img_resize(event);">
					<mx:Image id="img" horizontalAlign="center" verticalAlign="middle" smoothBitmapContent="true"
							  source="{this.data.data.@imgUrl}" doubleClick="img_doubleClickHandler(event)" resize="image_resize(event);"/>
				</mx:Box>
			</mx:Box>
			<mx:Box backgroundAlpha="0.001" backgroundColor="#ffffff" cornerRadius="5" paddingTop="10">
				<mx:LinkButton id="nodeText" label="{this.data.data.@name}" 
							   click="navigateToURL(new URLRequest('http://localhost:8080/PubGuru/Author?aid='+this.data.data.@id), 'quote')"
							   cornerRadius="5" fontSize="12" paddingBottom="0" paddingTop="0"
							   textAlign="center"/>
			</mx:Box>
			
		</mx:VBox>
	</mx:VBox>

	<mx:Zoom id="zoomIn" zoomHeightTo="1.5" zoomWidthTo="1.5" duration="100"/>
	<mx:Zoom id="zoomOut" zoomHeightTo="1.0" zoomWidthTo="1.0" duration="100"/>
	
	<mx:Script>
		<![CDATA[
			import business.events.ViewCoAuthorGraphEvent;
			
			import models.GraphLocator;
			
			import mx.controls.Alert;
			import mx.events.ResizeEvent;
			private function setNode():void {
				var nodeSize:int = this.data.data.@nodeSize;
				img.width = nodeSize;
				img.height = nodeSize;
				box_img.width = nodeSize+6;
				box_img.height = nodeSize+6;
			}
			
			public function bringToTop(event:MouseEvent):void
			{
				var father:DisplayObjectContainer=DisplayObjectContainer(this.parent);
				var brothers:int=father.numChildren;
				father.setChildIndex(this,brothers-1);
			}
			
			protected function img_doubleClickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(this.data.data.@id != GraphLocator.getInstance().idRoot)
				{
					GraphLocator.getInstance().waiting = true;
					var coauthorEvent:ViewCoAuthorGraphEvent = new ViewCoAuthorGraphEvent(this.data.data.@id);
					coauthorEvent.dispatch();
					GraphLocator.getInstance().graph.dataProvider.removeAll();
				}
			}
			
			private var roundedMask:Sprite;
			private var roundedMask2:Sprite;
			
			private function init():void {
				roundedMask = new Sprite();
				roundedMask2 = new Sprite();
				box.rawChildren.addChild(roundedMask2);
				box_img.rawChildren.addChild(roundedMask);
			}
			private function box_img_resize(evt:ResizeEvent):void{
				var w:Number = evt.currentTarget.width;
				var h:Number = evt.currentTarget.height;
				var cornerRadius:uint = 50;
				
				roundedMask2.graphics.clear();
				roundedMask2.graphics.beginFill(0xFF0000);
				roundedMask2.graphics.drawRoundRectComplex(0, 0,
					w, h,
					cornerRadius, cornerRadius,
					cornerRadius, cornerRadius);
				roundedMask2.graphics.endFill();
				box_img.mask = roundedMask2;
				img.smoothBitmapContent = true;
			}
			private function image_resize(evt:ResizeEvent):void {
				var w:Number = evt.currentTarget.width;
				var h:Number = evt.currentTarget.height;
				var cornerRadius:uint = 50;
				
				roundedMask.graphics.clear();
				roundedMask.graphics.beginFill(0xFF0000);
				roundedMask.graphics.drawRoundRectComplex(3, 3,
					w, h,
					cornerRadius, cornerRadius,
					cornerRadius, cornerRadius);
				roundedMask.graphics.endFill();
				img.mask = roundedMask;
				img.smoothBitmapContent = true;
			}

			
		]]>
	</mx:Script>	
</mx:Canvas>
